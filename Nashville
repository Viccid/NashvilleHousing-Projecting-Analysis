Select *
From NewPortFolioProject..NashvilleHousing$

--- Using Standardise Date Format (SaleDate)

Select SaleDate
From NewPortFolioProject..NashvilleHousing$


Select SaleDate, CONVERT (Date, SaleDate)
From NewPortFolioProject..NashvilleHousing$

Update NashvilleHousing$
SET SaleDate = CONVERT (Date, SaleDate)

ALTER TABLE NashvilleHousing$
Add SaleDateConverted Date;

Update NashvilleHousing$
SET SaleDateConverted = CONVERT (Date, SaleDate)

----Now Using the Standardise Date Format

Select SaleDateConverted, CONVERT (Date, SaleDate)
From NewPortFolioProject..NashvilleHousing$



-----Analysing the Property Address

Select PropertyAddress
From NewPortFolioProject..NashvilleHousing$
Where PropertyAddress is NULL


Select *
From NewPortFolioProject..NashvilleHousing$
Where PropertyAddress is NULL

---- By Using Self Join to Feel the Missing Address

Select *
From NewPortFolioProject..NashvilleHousing$ a
Join NewPortFolioProject..NashvilleHousing$ b
     On   a.ParcelID = b.ParcelID
     And     a.[UniqueID ] <> b.[UniqueID ]

	 
Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
From NewPortFolioProject..NashvilleHousing$ a
Join NewPortFolioProject..NashvilleHousing$ b
     On   a.ParcelID = b.ParcelID
     And     a.[UniqueID ] <> b.[UniqueID ]


Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
From NewPortFolioProject..NashvilleHousing$ a
Join NewPortFolioProject..NashvilleHousing$ b
     On   a.ParcelID = b.ParcelID
     And     a.[UniqueID ] <> b.[UniqueID ]


Update a
SET a.PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
From NewPortFolioProject..NashvilleHousing$ a
Join NewPortFolioProject..NashvilleHousing$ b
     On   a.ParcelID = b.ParcelID
     And     a.[UniqueID ] <> b.[UniqueID ]

Select *
From NewPortFolioProject..NashvilleHousing$
Where PropertyAddress is NULL


----Seperating the Address into Columns (Address , City and States)
----Using a Substring and Character index


Select PropertyAddress
From NewPortFolioProject..NashvilleHousing$

Select SUBSTRING (PropertyAddress, 1, CHARINDEX(',' , PropertyAddress) -1) as Address
, SUBSTRING (PropertyAddress, CHARINDEX(',' , PropertyAddress) +1, LEN(PropertyAddress)) as Address
From NewPortFolioProject..NashvilleHousing$

--- Updating the Columns Created

ALTER TABLE NashvilleHousing$
Add PropertySplitAddress NvarChar(225);

Update NashvilleHousing$
SET  PropertySplitAddress  = SUBSTRING (PropertyAddress, 1, CHARINDEX(',' , PropertyAddress) -1)

ALTER TABLE NashvilleHousing$
Add PropertySplitCity NvarChar(225);

Update NashvilleHousing$
SET PropertySplitCity = SUBSTRING (PropertyAddress, CHARINDEX(',' , PropertyAddress) +1, LEN(PropertyAddress))


Select *
From NewPortFolioProject..NashvilleHousing$


-- Using Alternative Method (PARSENAME METHOD) in Spliting the OwnerAddress

Select OwnerAddress
From NewPortFolioProject..NashvilleHousing$


Select 
PARSENAME(REPLACE(OwnerAddress, ',' , '.') , 3)
, PARSENAME(REPLACE(OwnerAddress, ',' , '.') , 2)
, PARSENAME(REPLACE(OwnerAddress, ',' , '.') , 1)
From NewPortFolioProject..NashvilleHousing$


--Updating the New Columns Created

ALTER TABLE NashvilleHousing$
Add OwnerSplitAddress NvarChar(225);

Update NashvilleHousing$
SET  OwnerSplitAddress  = PARSENAME(REPLACE(OwnerAddress, ',' , '.') , 3)

ALTER TABLE NashvilleHousing$
Add OwnerSplitCity NvarChar(225);

Update NashvilleHousing$
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',' , '.') , 2)

ALTER TABLE NashvilleHousing$
Add OwnerSplitState NvarChar(225);

Update NashvilleHousing$
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',' , '.') , 1)

Select *
From NewPortFolioProject..NashvilleHousing$


-- Changing Y and N to YES/NO in SoldAsVacant Column

Select Distinct(SoldAsVacant)
From NewPortFolioProject..NashvilleHousing$

Select Distinct(SoldAsVacant), COUNT(SoldAsVacant)
From NewPortFolioProject..NashvilleHousing$
Group by SoldAsVacant
Order by  2


-- Using Case Statement in Updating Y/N to YES/NO on SoldAsVacant Column.

Select SoldAsVacant
 , CASE  When SoldAsVacant = 'Y' Then 'Yes'
         When SoldAsVacant = 'N' Then 'No'
		 Else SoldAsVacant
		 End
From NewPortFolioProject..NashvilleHousing$


Update NashvilleHousing$
SET SoldAsVacant = CASE  When SoldAsVacant = 'Y' Then 'Yes'
                         When SoldAsVacant = 'N' Then 'No'
		                 Else SoldAsVacant
		                 End


-- Removing Duplicates (Using Row_number) and Insertin into CTE

Select *,
      ROW_NUMBER() Over(
	  Partition By ParcelID,
	               PropertyAddress,
				   SalePrice,
				   SaleDate,
				   LegalReference
				   Order By UniqueID
				        )Row_num
From NewPortFolioProject..NashvilleHousing$
Order By ParcelID

WITH RowNumCTE as (
Select *,
      ROW_NUMBER() Over(
	  Partition By ParcelID,
	               PropertyAddress,
				   SalePrice,
				   SaleDate,
				   LegalReference
				   Order By UniqueID
				        )Row_num
From NewPortFolioProject..NashvilleHousing$
--Order By ParcelID
)
Select *
From RowNumCTE
Where Row_num > 1
Order By PropertyAddress

--Remove Duplicate by Deleting

WITH RowNumCTE as (
Select *,
      ROW_NUMBER() Over(
	  Partition By ParcelID,
	               PropertyAddress,
				   SalePrice,
				   SaleDate,
				   LegalReference
				   Order By UniqueID
				        )Row_num
From NewPortFolioProject..NashvilleHousing$
--Order By ParcelID
)
Delete
From RowNumCTE
Where Row_num > 1
--Order By PropertyAddress


--Removing Unused Columns (Deleting), for view reason


Select *
From NewPortFolioProject..NashvilleHousing$

ALTER TABLE NashvilleHousing$
DROP Column OwnerAddress, PropertyAddress, TaxDistrict
 
 -- Also Deleting 'SaleDate' Column

ALTER TABLE NashvilleHousing$
DROP Column SaleDate

Select *
From NewPortFolioProject..NashvilleHousing$

-- Note the Data is clean, readable and useful for my analysis.
